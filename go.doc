package benchmark // import "github.com/skeptycal/_small_repos/benchmark"

Package benchmark contains utilities for macOS.

var RetVal = NewCaller(CallSetGlobalReturnValue) ...
var LimitResult bool ...
var NewAnyValue = types.NewAnyValue
var ValueOf = types.ValueOf
func AssertDeepEqual(t *testing.T, name string, got, want Any) bool
func AssertEqual(t *testing.T, name string, got, want Any) bool
func AssertKind(t *testing.T, name string, got, want reflect.Kind) bool
func AssertNotEqual(t *testing.T, name string, got, want Any) bool
func AssertSameKind(t *testing.T, name string, got, want Any) bool
func AssertSameType(t *testing.T, name string, got, want Any) bool
func BenchmarkAll(b *testing.B)
func CheckKind(got, want reflect.Kind) bool
func CompareFuncs(t *testing.T, name string, got, want Any) bool
func Example()
func NewBenchmarkSet2(name string, tests []benchmark, scalingFactor int, setup setupFunc, ...) *benchmarkSet2
type Any = types.Any
type AnyValue = types.AnyValue
    func CallSetGlobalReturnValue(any interface{}) []AnyValue
type ArgSet []Args
type Args interface{ ... }
type Assert interface{ ... }
type Benchmark interface{ ... }
    func Collect(path string) Benchmark
    func NewBenchmark(name string, fn Any, args []Any) Benchmark
type BenchmarkSet interface{ ... }
    func NewBenchmarkSet(b *testing.B, name string, set []Benchmark) BenchmarkSet
type Benchmarks interface{ ... }
type BmFunc = func(b *testing.B) []reflect.Value
    func BenchmarkFunc(fn ReFunc, args []reflect.Value) BmFunc
type Caller interface{ ... }
    func NewCaller(fn callerFunc) Caller
type Custom interface{ ... }
type GetSetter interface{ ... }
type Random interface{ ... }
type ReFunc = func(in []reflect.Value) []reflect.Value
type TestRunner interface{ ... }
    func NewTestSet(t *testing.T, name string, list []test) TestRunner
type Tester interface{ ... }
