package benchmark // import "github.com/skeptycal/benchmark"

const UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ...
const ReplacementChar rune = '\uFFFD'
var RetVal = NewCaller(CallSetGlobalReturnValue) ...
var LimitResult bool ...
var NewAnyValue = types.NewAnyValue
var ValueOf = types.ValueOf
func AssertDeepEqual(t *testing.T, name string, got, want Any) bool
func AssertEqual(t *testing.T, name string, got, want Any) bool
func AssertKind(t *testing.T, name string, got, want reflect.Kind) bool
func AssertNotEqual(t *testing.T, name string, got, want Any) bool
func AssertSameKind(t *testing.T, name string, got, want Any) bool
func AssertSameType(t *testing.T, name string, got, want Any) bool
func CheckKind(got, want reflect.Kind) bool
func CompareFuncs(t *testing.T, name string, got, want Any) bool
func Contains(needle Any, haystack []Any) bool
func Example()
func RandomString(n int) string
func TError(t *testing.T, name string, got, want Any)
func TErrorf(t *testing.T, name string, got, want Any)
func TName(testname, funcname, argname Any) string
func TRun(t *testing.T, name string, got, want Any)
func TRunTest(t *testing.T, tt *test)
func TTypeError(t *testing.T, name string, got, want Any)
func TTypeRun(t *testing.T, name string, got, want Any)
type Any = types.Any
type AnyValue = types.AnyValue
    func CallSetGlobalReturnValue(any interface{}) []AnyValue
type Assert interface{ ... }
type Benchmark interface{ ... }
    func Collect(path string) Benchmark
    func NewBenchmark(name string, fn Any, args []Any) Benchmark
type BenchmarkSet interface{ ... }
    func NewBenchmarkSet(b *testing.B, name string, set []Benchmark) BenchmarkSet
type BmFunc = func(b *testing.B) []reflect.Value
    func BenchmarkFunc(fn ReFunc, args []reflect.Value) BmFunc
type Caller interface{ ... }
    func NewCaller(fn callerFunc) Caller
type Custom interface{ ... }
type GetSetter interface{ ... }
type Random interface{ ... }
type ReFunc = func(in []reflect.Value) []reflect.Value
type Tester interface{ ... }
    func NewTest(t *testing.T, name string, in, got, want Any, wantErr bool) Tester
    func NewTestSet(t *testing.T, name string, list []Tester) Tester
